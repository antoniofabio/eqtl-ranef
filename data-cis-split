#!/usr/bin/env Rscript

suppressMessages({
  library(optparse)
  library(plyr)
})

options(stringsAsFactors = FALSE)

option_list <-
    list(
        make_option("--gex", help = "expression data table", default = NULL),
        make_option("--gt", help = "sorted genotype data table", default = NULL),
        make_option("--cis-ranges", help = "cis ranges table [default: cisRanges.tab]", default = "cisRanges.tab"),
        make_option("--chunks", help = "num. chunks [default: 1000]", default = 1000),
        make_option("--output-prefix", help = "output prefix [default: 'OUT/']", default = "OUT/"),
        make_option("--dump-cisranges", help = "write out cis ranges tab files [default: FALSE]", action = "store_true", default = FALSE),
        make_option("--dump-cispairs-db", help = "write out cis pairs db files [default: FALSE]", action = "store_true", default = FALSE),
        make_option("--zip-chunks", help = "gzip expression and genotype files [default: FALSE]", action = "store_true", default = FALSE)
        )

parser <- OptionParser(usage = "%prog [options]",
                       description = "splits eqtl data in chunks, assuming only cis tests will be performed",
                       option_list = option_list)
opts <- parse_args(parser, positional_arguments = FALSE)

if(opts$`dump-cispairs-db` && is.null(opts$gt)) {
  stop("sorted genotype data is needed, in order to dump out cispairs db files")
}

message("options:")
sink(stderr())
str(opts)
sink()


if(!is.null(opts$gex)) {
  stopifnot(file.exists(opts$gex))
}

if(!is.null(opts$gt)) {
  stopifnot(file.exists(opts$gt))
}

stopifnot(file.exists(opts$`cis-ranges`))

message("reading cis ranges data...")
ranges <- read.table(opts$`cis-ranges`,
                     header = FALSE, sep = "\t", quote = "", comment.char = "",
                     col.names = c("reporterID", "start", "end"),
                     colClasses = c("character", "numeric", "numeric"))
message("done:")
sink(stderr())
str(ranges)
sink()

if(!is.null(opts$gt)) {
  gt.con <- file(opts$gt, open = "r", raw = TRUE)
  gt.fields <- strsplit(readLines(gt.con, n = 1), "\t")[[1]]
}

CHUNKS <- min(nrow(ranges), opts$chunks)
message("splitting the data into ", CHUNKS, " chunks")
ranges$chunk <- round(seq(from = 1, to = CHUNKS, length = nrow(ranges)))

chunks <- ddply(ranges, .(chunk), summarize,
                start = min(start),
                end = max(end),
                num.snps = max(end) - min(start) + 1,
                num.genes = length(start),
                num.tests = sum(end) - sum(start) + length(start))
## CDIGITS <- ceiling(log10(CHUNKS)) + 1
## CFMT <- sprintf("%%s%%0%dd/", CDIGITS)
## chunks$folder <- sprintf(CFMT, opts$`output-prefix`, chunks$chunk)
chunks$folder <- sprintf("%s%d/", opts$`output-prefix`, chunks$chunk)

message("\nnum. SNPs per chunk:")
sink(stderr())
print(summary(chunks$num.snps))
sink()

message("\nnum. genes per chunk:")
sink(stderr())
print(table(chunks$num.genes))
sink()

message("\nnum. tests per chunk:")
sink(stderr())
print(summary(chunks$num.tests))
sink()

message("")

message("creating output folders ", shQuote(chunks$folder[1]), " to ", shQuote(tail(chunks$folder, 1)), " ...")
d_ply(chunks, .(chunk), splat(function(folder, ...) {
  if(!file.exists(folder)) {
    dir.create(folder, showWarning = FALSE, recursive = TRUE)
  }
}))
message("done.")

if(!is.null(opts$gex)) {

  message("\n=processing expression data=\n")

  message("reading full expression data in memory...")
  gex.fields <- strsplit(readLines(opts$gex, n = 1), "\t")[[1]]
  gex <- read.table(opts$gex,
                    header = TRUE,
                    col.names = gex.fields,
                    colClasses = c("character", rep("numeric", length(gex.fields) - 1)),
                    check.names = FALSE)
  message("done.")

  message("writing chunks on disk...")
  d_ply(chunks, .(chunk), splat(function(chunk, folder, ...) {
    chunk.in <- chunk
    genes <- unique(subset(ranges, chunk == chunk.in)$reporterID)
    gex.chunk <- subset(gex, gex[[1]] %in% genes)
    outFile <- file.path(folder, "expression.fat")
    outCon <- if(opts$`zip-chunks`) {
      gzfile(paste0(outFile, ".gz"), open = "w")
    } else {
      file(outFile, open = "w")
    }
    on.exit(close(outCon))
    write.table(gex.chunk,
                file = outCon,
                sep = "\t",
                quote = FALSE,
                row.names = FALSE, col.names = TRUE)
  }))
  message("done.")

}

if(opts$`dump-cisranges`) {

  ranges.db <- merge(ranges, subset(chunks, select = c(chunk, folder)))
  ranges.db$filename <- file.path(ranges.db$folder, "cisRanges.tab")

  d_ply(ranges.db, .(chunk), splat(function(reporterID, start, end, filename, ...) {

    offset <- min(start)

    ans <- data.frame(reporterID = reporterID,
                      from = start - offset + 1,
                      to = end - offset + 1,
                      stringsAsFactors = FALSE)

    write.table(ans,
                file = filename[1],
                row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")

  }))

  if(opts$`zip-chunks`) {
    message("gzipping cis pairs tables...")
    commands <- sprintf("gzip %s", shQuote(ranges.db$filename))
    sink(stderr())
    status <- laply(commands, system, intern = FALSE,
                    .progress = progress_text(style = 1))
    sink()
    stopifnot(all(status == 0))
    message("done.")
  }

}

if(!is.null(opts$gt)) {

  message("\n=processing genotype data=\n")

  gt.con <- file(opts$gt, open = "r", raw = TRUE)
  gt.header <- readLines(gt.con, n = 1)
  stopifnot(length(gt.header) > 0)

  gt.chunks <- chunks
  gt.chunks$filename <- file.path(gt.chunks$folder, "genotype.fat")
  d_ply(gt.chunks, .(chunk), splat(function(filename, ...) {
    cat(gt.header, "\n", sep = "", file = filename, append = FALSE)
  }))

  gt.counter <- 0L

  if(opts$`dump-cispairs-db`) {
    gt.snps <- character(1e5)
  }

  BLOCK_SIZE <- 1000L
  START_COUNT <- 0L

  TIME_INTERVAL <- as.difftime(1, units = "mins")
  ORIG_TIME <- START_TIME <- Sys.time()

  repeat {

    BLOCK <- readLines(gt.con, n = BLOCK_SIZE)
    if(length(BLOCK) == 0) {
      break
    }

    gt.offset <- length(BLOCK)
    gt.counter <- gt.counter + gt.offset

    if(opts$`dump-cispairs-db`) {
      if(gt.counter > length(gt.snps)) {
        gt.snps <- c(gt.snps, character(length(gt.snps)))
      }
      gt.snps[seq(gt.counter - gt.offset + 1L, gt.counter)] <-
          sapply(strsplit(BLOCK, "\t"), "[", 1)
    }

    gt.base <- gt.counter - gt.offset
    for(cursor in seq_len(gt.offset)) {
      gt.line <- BLOCK[cursor]
      gt.i.files <- subset(gt.chunks, start <= (gt.base + cursor) & end >= (gt.base + cursor))$filename
      for(f in gt.i.files) {
        cat(gt.line, "\n", sep = "", file = f, append = TRUE)
      }
    }

    CUR_TIME <- Sys.time()
    ELAPSED <- CUR_TIME - START_TIME
    if(ELAPSED > TIME_INTERVAL) {
      START_TIME <- CUR_TIME
      speed <- (gt.counter - START_COUNT) / as.double(ELAPSED, units = "hours")
      message(gt.counter, " SNPs processed in ", format(CUR_TIME - ORIG_TIME),
              " [last split: ", round(speed / 1000), "k SNPs/h]")
      START_COUNT <- gt.counter
    }

  }

  if(opts$`dump-cispairs-db`) {
    gt.snps <- head(gt.snps, n = gt.counter)
  }

  CUR_TIME <- Sys.time()
  message(gt.counter, " SNPs processed in ", format(CUR_TIME - ORIG_TIME))
  message("")

  close(gt.con)

  if(opts$`zip-chunks`) {
    message("gzipping genotype data chunks...")
    commands <- sprintf("gzip %s", shQuote(gt.chunks$filename))
    sink(stderr())
    status <- laply(commands, system, intern = FALSE,
                    .progress = progress_text(style = 1))
    sink()
    stopifnot(all(status == 0))
    message("done.")
  }

  if(opts$`dump-cispairs-db`) {

    if(!suppressMessages(require(RSQLite))) {
      message("the RSQLite R package is needed in order to dump cispairs db files")
      quit(save = "no", status = 1)
    }

    message("dumping cispairs db files...")
    driver <- dbDriver("SQLite")

    ranges.db <- merge(ranges, subset(chunks, select = c(chunk, folder)))
    ranges.db$filename <- file.path(ranges.db$folder, "cispairs.sqlite")

    d_ply(ranges.db, .(chunk), splat(function(filename, reporterID, start, end, ...) {

      pairs <- ddply(data.frame(reporterID, start, end),
                     .(reporterID), summarize,
                     SNPID = gt.snps[seq(start, end)])

      if(nrow(pairs) == 0) {
        return(NULL)
      }

      ignore <- unlink(filename[1], force = TRUE)
      db <- dbConnect(driver, filename[1])
      ignore <- dbGetQuery(db, "create table pairs(reporterID text, SNPID text)")
      dbWriteTable(db, value = pairs, name = "pairs",
                   row.names = FALSE, overwrite = TRUE)
      ignore <- dbGetQuery(db, "create index repIdx on pairs(reporterID)")
      ignore <- dbGetQuery(db, "create index snpIdx on pairs(SNPID)")
      dbDisconnect(db)

    }))

    message("done.\n")

  }

}

message("\nanalysis completed.")
