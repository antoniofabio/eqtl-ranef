#!/usr/bin/env Rscript

suppressMessages({
  library(optparse)
  library(plyr)
})

options(stringsAsFactors = FALSE)

option_list <-
    list(
        make_option("--chunks", help = "chunks spec file", default = NULL),
        make_option("--output-prefix", help = "output prefix [default: 'OUT/']", default = "OUT/"),
        make_option("--gex", help = "expression data table", default = NULL),
        make_option("--gt", help = "sorted genotype data table", default = NULL),
        make_option("--cis-ranges", help = "cis ranges table", default = NULL),
        make_option("--dump-cisranges", help = "write out cis ranges tab files [default: FALSE]", action = "store_true", default = FALSE),
        make_option("--dump-cispairs-db", help = "write out cis pairs db files [default: FALSE]", action = "store_true", default = FALSE),
        make_option("--zip", help = "gzip expression and genotype files [default: FALSE]", action = "store_true", default = FALSE)
        )

parser <- OptionParser(usage = "%prog [options]",
                       description = "splits eqtl data in pre-specified chunks",
                       option_list = option_list)
opts <- parse_args(parser, positional_arguments = FALSE)

if(opts$`dump-cispairs-db` && is.null(opts$gt)) {
  stop("sorted genotype data is needed, in order to dump out cispairs db files")
}

message("options:")
sink(stderr())
str(opts)
sink()

stopifnot(file.exists(opts$chunks))

if(!is.null(opts$gex)) {
  stopifnot(file.exists(opts$gex))
}

if(!is.null(opts$gt)) {
  stopifnot(file.exists(opts$gt))
}

if(!is.null(opts$`cis-ranges`)) {
  stopifnot(file.exists(opts$`cis-ranges`))
}

message("reading chunks spec data...")
chunks <- read.table(opts$chunks,
                     header = TRUE, sep = "\t", quote = "", comment.char = "",
                     as.is = TRUE, check.names = FALSE)
message("done:")
sink(stderr())
str(chunks)
sink()

chunks$folder <- sprintf("%s%d", opts$`output-prefix`, chunks$chunk)
message("creating output folders ", shQuote(chunks$folder[1]), " to ", shQuote(tail(chunks$folder, 1)), " ...")
d_ply(chunks, .(chunk), splat(function(folder, ...) {
  if(!file.exists(folder)) {
    dir.create(folder, showWarning = FALSE, recursive = TRUE)
  }
}))
message("done.")

if(!is.null(opts$gex)) {

  message("\n=processing expression data=\n")

  message("reading full expression data in memory...")
  gex.fields <- strsplit(readLines(opts$gex, n = 1), "\t")[[1]]
  gex <- read.table(opts$gex,
                    header = TRUE,
                    col.names = gex.fields,
                    colClasses = c("character", rep("numeric", length(gex.fields) - 1)),
                    check.names = FALSE)
  message("done.")

  message("writing chunks on disk...")
  d_ply(chunks, .(chunk), splat(function(chunk, gex_start, gex_end, folder, ...) {
    gex.chunk <- gex[seq(gex_start, gex_end),, drop = FALSE]
    outFile <- file.path(folder, "expression.fat")
    outCon <- if(opts$zip) {
      gzfile(paste0(outFile, ".gz"), open = "w")
    } else {
      file(outFile, open = "w")
    }
    on.exit(close(outCon))
    write.table(gex.chunk,
                file = outCon,
                sep = "\t",
                quote = FALSE,
                row.names = FALSE, col.names = TRUE)
  }),
        .progress = progress_text(style = 1))
  message("done.")

}

if(opts$`dump-cisranges` || opts$`dump-cispairs-db`) {

  message("reading cis-ranges data...")
  ranges <- read.table(opts$`cis-ranges`,
                       header = FALSE, sep = "\t", quote = "", comment.char = "",
                       col.names = c("reporterID", "start", "end"),
                       colClasses = c("character", "numeric", "numeric"))
  ranges$i <- seq_len(nrow(ranges))
  message("done:")
  sink(stderr())
  str(ranges)
  sink()

}

if(opts$`dump-cisranges`) {

  message("dumping cis-ranges data...")

  for(chk in unique(chunks$chunk)) {

    chunk <- subset(chunks, chunk == chk)
    rng <- subset(ranges, i >= min(chunk$gex_start) & i <= max(chunk$gex_end))
    if((nrow(chunk) == 0) || nrow(rng) == 0) {
      next
    }
    rng <- merge(rng, subset(chunk, select = c(chunk, gex_start, gex_end, folder)))

    filename <- file.path(rng$folder, "cisRanges.tab")
    reporterID <- rng$reporterID
    start <- rng$start
    end <- rng$end

    offset <- min(start)

    ans <- data.frame(reporterID = reporterID,
                      from = start - offset + 1,
                      to = end - offset + 1,
                      stringsAsFactors = FALSE)

    outFile <- filename[1]
    outCon <- if(opts$zip) {
      gzfile(paste0(outFile, ".gz"), open = "w")
    } else {
      file(outFile, open = "w")
    }

    write.table(ans,
                file = outCon,
                row.names = FALSE, col.names = FALSE, quote = FALSE, sep = "\t")

    close(outCon)

  }

  message("done.")

}

if(!is.null(opts$gt)) {

  message("\n=processing genotype data=\n")

  gt.con <- file(opts$gt, open = "r", raw = TRUE)
  gt.header <- readLines(gt.con, n = 1)
  stopifnot(length(gt.header) > 0)

  gt.chunks <- chunks
  gt.chunks$filename <- file.path(gt.chunks$folder, if(opts$zip) "genotype.fat.gz" else "genotype.fat")

  gt.counter <- 0L

  if(opts$`dump-cispairs-db`) {
    gt.snps <- character(1e5)
  }

  BLOCK_SIZE <- 1000L
  START_COUNT <- 0L

  TIME_INTERVAL <- as.difftime(10, units = "secs")
  ORIG_TIME <- START_TIME <- Sys.time()

  gtConnections <- vector(mode = "list", length  = nrow(gt.chunks))
  names(gtConnections) <- gt.chunks$filename

  repeat {

    BLOCK <- readLines(gt.con, n = BLOCK_SIZE)
    if(length(BLOCK) == 0) {
      break
    }

    gt.offset <- length(BLOCK)
    gt.counter <- gt.counter + gt.offset

    if(opts$`dump-cispairs-db`) {
      if(gt.counter > length(gt.snps)) {
        gt.snps <- c(gt.snps, character(length(gt.snps)))
      }
      gt.snps[seq(gt.counter - gt.offset + 1L, gt.counter)] <-
          sapply(strsplit(BLOCK, "\t"), "[", 1)
    }

    gt.base <- gt.counter - gt.offset

    gt.i.chunks <- subset(gt.chunks, !((gt_end < (gt.base + 1)) | (gt_start > gt.counter)))

    previouslyOpenConnections <- names(gtConnections)[!sapply(gtConnections, is.null)]

    toBeClosed <- setdiff(previouslyOpenConnections, gt.i.chunks$filename)
    gtConnections[toBeClosed] <- lapply(gtConnections[toBeClosed], function(con) {
      close(con)
      return(NULL)
    })

    toBeOpened <- setdiff(gt.i.chunks$filename, previouslyOpenConnections)
    for(fn in toBeOpened) {
      gtConnections[[ fn ]] <-
          if(opts$zip) {
            gzfile(fn, open = "w")
          } else {
            file(fn, open = "w")
          }
      writeLines(gt.header, con = gtConnections[[ fn ]])
    }

    for(i in seq_len(nrow(gt.i.chunks))) {
      ch <- gt.i.chunks[i, ]
      A <- max(ch$gt_start - gt.base, 1)
      B <- min(ch$gt_end - gt.base, gt.offset)
      if(B >= A) {
        block.i <- BLOCK[seq(A, B)]
        writeLines(paste(block.i, collapse = "\n"),
                   con = gtConnections[[ ch$filename ]])
      }
    }

    CUR_TIME <- Sys.time()
    ELAPSED <- CUR_TIME - START_TIME
    if(ELAPSED > TIME_INTERVAL) {
      START_TIME <- CUR_TIME
      speed <- (gt.counter - START_COUNT) / as.double(ELAPSED, units = "hours")
      message(gt.counter, " SNPs processed in ", format(CUR_TIME - ORIG_TIME),
              " [last split: ", round(speed / 1e6, 1), "M SNPs/h]")
      START_COUNT <- gt.counter
    }

  }

  ## close all remaining gt files connections
  l_ply(Filter(Negate(is.null), gtConnections), close)

  if(opts$`dump-cispairs-db`) {
    gt.snps <- head(gt.snps, n = gt.counter)
  }

  CUR_TIME <- Sys.time()
  message(gt.counter, " SNPs processed in ", format(CUR_TIME - ORIG_TIME))
  message("")

  close(gt.con)

  if(opts$`dump-cispairs-db`) {

    if(!suppressMessages(require(RSQLite))) {
      message("the RSQLite R package is needed in order to dump cispairs db files")
      quit(save = "no", status = 1)
    }

    message("dumping cispairs db files...")
    driver <- dbDriver("SQLite")

    for(chk in unique(chunks$chunk)) {

      chunk <- subset(chunks, chunk == chk)
      rng <- subset(ranges, i >= min(chunk$gex_start) & i <= max(chunk$gex_end))
      if((nrow(chunk) == 0) || nrow(rng) == 0) {
        next
      }
      rng <- merge(rng, subset(chunk, select = c(chunk, gex_start, gex_end, folder)))

      filename <- file.path(rng$folder, "cispairs.sqlite")
      sink(stderr())
      str(rng)
      sink()
      reporterID <- rng$reporterID
      start <- rng$start
      end <- rng$end

      pairs <- ddply(data.frame(reporterID, start, end),
                     .(reporterID), summarize,
                     SNPID = gt.snps[seq(start, end)])

      if(nrow(pairs) == 0) {
        return(NULL)
      }

      ignore <- unlink(filename[1], force = TRUE)
      db <- dbConnect(driver, filename[1])
      ignore <- dbGetQuery(db, "create table pairs(reporterID text, SNPID text)")
      dbWriteTable(db, value = pairs, name = "pairs",
                   row.names = FALSE, overwrite = TRUE)
      ignore <- dbGetQuery(db, "create index repIdx on pairs(reporterID)")
      ignore <- dbGetQuery(db, "create index snpIdx on pairs(SNPID)")
      dbDisconnect(db)

    }

    message("done.\n")

  }

}

message("\nanalysis completed.")
