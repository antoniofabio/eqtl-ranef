#!/usr/bin/env Rscript

if(!suppressPackageStartupMessages(require("optparse", quietly=TRUE))) {
  stop("the 'optparse' package is needed in order to run this script")
}

option_list <-
  list(
       make_option("--id-vars", help = "number of ID variables [default: 1]",
                   default = 1)
       )

parser <- OptionParser(usage = "%prog [--id-vars=1] inputFileName",
                       description = "melts fat tab-delimited data into a long, thin table",
                       option_list = option_list)
opts <- parse_args(parser, positional_arguments = TRUE)

idVars <- as.numeric(opts$options$`id-vars`)
args <- opts$args

if(length(args) != 1) {
  print_help(parser)
  quit(save = "no", status = 1)
}

inputFileName <- args[1]
message("input file: ", shQuote(inputFileName))
if(!file.exists(inputFileName)) {
  stop("input file ", shQuote(inputFileName), " does not exist")
}

fin <- file(inputFileName, "r", raw = TRUE)

header <- readLines(fin, n = 1)
fields <- strsplit(header, "\t")[[1]]
samples <- tail(fields, -idVars)

stopifnot(length(samples) > 0)

message(length(samples), " samples detected:")
sink(stderr())
str(samples)
sink()

colClasses <- rep("character", length(fields))

rowsCounter <- 0
BLOCK_SIZE <- 10000
TIME_INTERVAL <- as.difftime(1, units = "mins")
TIME_ORIG <- TIME_START <- Sys.time()

repeat {

  block <- read.table(fin,
                      sep = "\t",
                      header = FALSE,
                      col.names = fields,
                      colClasses = colClasses,
                      quote = "",
                      comment.char = "",
                      nrows = BLOCK_SIZE,
                      check.names = FALSE)
  rowsCounter <- rowsCounter + nrow(block)

  if(nrow(block) == 0) {
    message("no data in input: terminating...")
    break
  }

  value <- as.vector(t(as.matrix(block[, samples])))
  rowID <- lapply(block[, seq_len(idVars), drop = FALSE], rep,
                  each = length(samples))

  out <- with(block,
              data.frame(rowID,
                         colID = rep(samples, nrow(block)),
                         value = value,
                         stringsAsFactors = FALSE))

  write.table(out,
              sep = "\t",
              quote = FALSE,
              row.names = FALSE,
              col.names = FALSE)

  TIME_CUR <- Sys.time()
  TIME_ELAPSED <- TIME_CUR - TIME_START
  if(TIME_ELAPSED > TIME_INTERVAL) {
    TIME_START <- TIME_CUR
    message(rowsCounter, " rows processed in ", format(TIME_CUR - TIME_ORIG))
  }

  gc()

}

TIME_CUR <- Sys.time()
message(rowsCounter, " rows processed in ", format(TIME_CUR - TIME_ORIG))

message("conversion completed.")
