#!/usr/bin/env Rscript

suppressMessages({
  library(optparse)
  library(reshape)
  library(plyr)
  library(RSQLite)
  library(lme4)
})

option_list <-
    list(
        make_option("--regressors", help = "regressors data matrix file (use '-' for standard input)", default = NULL),
        make_option("--outcomes", help = "outcomes data matrix file", default = NULL),
        make_option("--fixef", help = "fixed effects terms", default = NULL),
        make_option("--ranef", help = "random effects terms", default = NULL),
        make_option("--genespos", help = "genes positions sqlite database", default = NULL),
        make_option("--snpspos", help = "snps positions sqlite database",  default = NULL),
        make_option("--cis-window", help = "cis window size [default: 5e5]", default = 5e5),
        make_option("--trans-pvalue", help = "trans p-value threshold [default: 1E-5]", default = 1e-5),
        make_option("--cis-pvalue", help = "cis p-value threshold [default: 0.1]", default = 0.1),
        make_option("--cores", help = "numbers of cores to use [default: 1]", default = 1)
        )

parser <- OptionParser(usage = "%prog [options] < genotype.thin.dose",
                       description = "random effects eqtls",
                       option_list = option_list)
opts <- parse_args(parser, positional_arguments = FALSE)

##
## check sanity of input options
##
with(opts, {
  if(regressors != "-") {
    stopifnot(file.exists(regressors))
  }
  stopifnot(file.exists(outcomes))
  stopifnot(file.exists(fixef))
  stopifnot(file.exists(ranef))
  stopifnot(file.exists(genespos))
  stopifnot(file.exists(snpspos))
  stopifnot(`cis-window` >= 0)
  stopifnot(`cis-pvalue` >= 0)
  stopifnot(`trans-pvalue` >= 0)
  stopifnot(cores >= 1)
})

if(opts$cores > 1) suppressMessages({
  library(doMC)
  registerDoMC(cores = opts$cores)
})

db <- dbConnect(dbDriver("SQLite"), ":memory:")
ignore <- dbGetQuery(db, sprintf('attach "%s" as genesdb', opts$genespos))
ignore <- dbGetQuery(db, sprintf('attach "%s" as snpsdb', opts$snpspos))

if(opts$regressors == "-") {
  input <- file("stdin")
} else {
  input <- file(opts$regressors, open = "r", raw = TRUE)
}

message("reading outcomes data...")
outcomes <- read.table(opts$outcomes,
                       sep = "\t",
                       header = FALSE,
                       quote = "",
                       comment.char = "",
                       colClasses = c("character", "character", "numeric"),
                       col.names = c("reporterID", "sampleID", "expression"))
message("done:")
sink(stderr())
str(outcomes)
sink()

message("reading fixed effects data...")
fixef <- read.table(opts$fixef,
                    sep = "\t",
                    header = FALSE,
                    quote = "",
                    comment.char = "",
                    colClasses = c("character", NA_character_))
names(fixef)[1] <- "sampleID"
names(fixef)[-1] <- paste0("F", seq_len(length(fixef) - 1))
message("done:")
sink(stderr())
str(fixef)
sink()

message("reading random effects data...")
ranef <- read.table(opts$ranef,
                    sep = "\t",
                    header = FALSE,
                    quote = "",
                    comment.char = "",
                    colClasses = c("character", NA_character_))
names(ranef)[1] <- "sampleID"
names(ranef)[-1] <- paste0("R", seq_len(length(ranef) - 1))
message("done:")
sink(stderr())
str(ranef)
sink()

##
## build formula
##
formula.fixef <- paste(names(fixef)[-1], collapse = " + ")
formula.ranef <- paste(sprintf("(1 | %s)", names(ranef)[-1]), collapse = " + ")
formula.str <- sprintf("expression ~ alleleCopyNumber + %s + %s", formula.fixef, formula.ranef)
formula <- as.formula(formula.str)
message("model formula:")
sink(stderr())
print(formula)
sink()

CHUNK_SIZE <- 1000L
readRegressor <- function(con) {
  ans <- data.frame(SNPID = character(0), sampleID = character(0), alleleCopyNumber = numeric(0),
                    stringsAsFactors = FALSE)

  repeat {
    txt <- readLines(con, CHUNK_SIZE, warn = FALSE)
    if(length(txt) == 0) {
      break
    }

    txtCon <- textConnection(txt)
    chunk <- read.table(txtCon,
                        sep = "\t",
                        header = FALSE,
                        quote = "",
                        comment.char = "",
                        colClasses = c("character", "character", "numeric"),
                        col.names = c("SNPID", "sampleID", "alleleCopyNumber"))
    lastSeenSNP <- tail(chunk$SNPID, 1)
    if(chunk$SNPID[1] != lastSeenSNP) {
      keep.flag <- with(chunk, SNPID != lastSeenSNP)
      ans <- rbind(ans, subset(chunk, keep.flag))
      pushBack(txt[!keep.flag], con)
      break
    }
    ans <- rbind(ans, chunk)
  }

  return(ans)
}

repeat {

genotype <- readRegressor(input)
if(nrow(genotype) == 0) {
  break
}

message("building main data matrix...")
covariates <- merge(fixef, ranef, by = "sampleID")
data <- merge(genotype, outcomes, by = "sampleID")
data <- merge(data, covariates, by = "sampleID")
message("done:")
sink(stderr())
str(data)
sink()

pvalue.max <- max(opts$`cis-pvalue`, opts$`trans-pvalue`)

fitter <- function(dat) {
  out <- coefficients(summary(lmer(formula, data = dat)))["alleleCopyNumber",, drop = FALSE]
  tValue <- out[, "t value"]
  subset(data.frame(pvalue = 2 * pnorm(abs(tValue), lower.tail = FALSE),
                    beta = out[, "Estimate"],
                    t = tValue,
                    nobs = nrow(dat)),
         pvalue <= pvalue.max)
}

message("fitting models...")
results <- ddply(data, .(reporterID, SNPID), fitter, .parallel = opts$cores > 1)
message("done.")

##
## tag cis and trans
##
message("filtering results...")
dbG <- function(...) invisible(dbGetQuery(db, sprintf(...)))

ignore <- dbWriteTable(db, name = "results", value = results)

out <- dbG('
  SELECT gexpos.reporterID as reporterID, gtpos.SNPID as SNPID, rs.pvalue as pvalue
  FROM snpsdb.snpspos as gtpos, genesdb.genespos as gexpos, results as rs
  WHERE gtpos.SNPID == rs.SNPID
  AND gexpos.reporterID == rs.reporterID
  AND
   (
    ((gtpos.chromosome == gexpos.chromosome)
    AND
    ((abs(gtpos.position - gexpos.start) <= %d)
     OR (abs(gtpos.position - gexpos.end) <= %d)
     OR (gtpos.position >= gexpos.start AND gtpos.position <= gexpos.end)))
    OR
     rs.pvalue <= %f
   )
', opts$`cis-window`, opts$`cis-window`, opts$`trans-pvalue`)

ignore <- dbRemoveTable(db, "results")

message("done:")
sink(stderr())
str(out)
sink()

message("writing to standard output...")
write.table(out,
            row.names = FALSE,
            col.names = FALSE,
            sep = "\t",
            quote = FALSE)
message("done.")

} ## END REPEAT BLOCK

ignore <- dbDisconnect(db)

message("analysis completed.")
